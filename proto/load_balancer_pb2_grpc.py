# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import inventory_pb2 as inventory__pb2
import load_balancer_pb2 as load__balancer__pb2
import user_cart_pb2 as user__cart__pb2


class LoadBalancerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/Login',
                request_serializer=user__cart__pb2.LoginRequest.SerializeToString,
                response_deserializer=user__cart__pb2.LoginResponse.FromString,
                )
        self.CreateAccount = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/CreateAccount',
                request_serializer=user__cart__pb2.CreateAccountRequest.SerializeToString,
                response_deserializer=user__cart__pb2.CreateAccountResponse.FromString,
                )
        self.AddToCart = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/AddToCart',
                request_serializer=load__balancer__pb2.LoadBalancerCartRequest.SerializeToString,
                response_deserializer=user__cart__pb2.CartResponse.FromString,
                )
        self.RemoveFromCart = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/RemoveFromCart',
                request_serializer=load__balancer__pb2.LoadBalancerCartRequest.SerializeToString,
                response_deserializer=user__cart__pb2.CartResponse.FromString,
                )
        self.GetCart = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/GetCart',
                request_serializer=user__cart__pb2.UserRequest.SerializeToString,
                response_deserializer=user__cart__pb2.CartResponse.FromString,
                )
        self.Checkout = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/Checkout',
                request_serializer=user__cart__pb2.UserRequest.SerializeToString,
                response_deserializer=user__cart__pb2.CheckoutResponse.FromString,
                )
        self.GetInventory = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/GetInventory',
                request_serializer=inventory__pb2.Empty.SerializeToString,
                response_deserializer=inventory__pb2.InventoryList.FromString,
                )
        self.UpdateInventory = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/UpdateInventory',
                request_serializer=load__balancer__pb2.LoadBalancerInventoryRequest.SerializeToString,
                response_deserializer=inventory__pb2.UpdateResponse.FromString,
                )
        self.ReplicateShardMapping = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/ReplicateShardMapping',
                request_serializer=load__balancer__pb2.ShardMappingRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.Empty.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/loadbalancer.LoadBalancerService/Heartbeat',
                request_serializer=load__balancer__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.HeartbeatResponse.FromString,
                )


class LoadBalancerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Login(self, request, context):
        """User authentication and management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToCart(self, request, context):
        """Cart operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFromCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Checkout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInventory(self, request, context):
        """Inventory operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateInventory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateShardMapping(self, request, context):
        """Replication between load balancers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoadBalancerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=user__cart__pb2.LoginRequest.FromString,
                    response_serializer=user__cart__pb2.LoginResponse.SerializeToString,
            ),
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=user__cart__pb2.CreateAccountRequest.FromString,
                    response_serializer=user__cart__pb2.CreateAccountResponse.SerializeToString,
            ),
            'AddToCart': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToCart,
                    request_deserializer=load__balancer__pb2.LoadBalancerCartRequest.FromString,
                    response_serializer=user__cart__pb2.CartResponse.SerializeToString,
            ),
            'RemoveFromCart': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFromCart,
                    request_deserializer=load__balancer__pb2.LoadBalancerCartRequest.FromString,
                    response_serializer=user__cart__pb2.CartResponse.SerializeToString,
            ),
            'GetCart': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCart,
                    request_deserializer=user__cart__pb2.UserRequest.FromString,
                    response_serializer=user__cart__pb2.CartResponse.SerializeToString,
            ),
            'Checkout': grpc.unary_unary_rpc_method_handler(
                    servicer.Checkout,
                    request_deserializer=user__cart__pb2.UserRequest.FromString,
                    response_serializer=user__cart__pb2.CheckoutResponse.SerializeToString,
            ),
            'GetInventory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInventory,
                    request_deserializer=inventory__pb2.Empty.FromString,
                    response_serializer=inventory__pb2.InventoryList.SerializeToString,
            ),
            'UpdateInventory': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateInventory,
                    request_deserializer=load__balancer__pb2.LoadBalancerInventoryRequest.FromString,
                    response_serializer=inventory__pb2.UpdateResponse.SerializeToString,
            ),
            'ReplicateShardMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateShardMapping,
                    request_deserializer=load__balancer__pb2.ShardMappingRequest.FromString,
                    response_serializer=load__balancer__pb2.Empty.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=load__balancer__pb2.HeartbeatRequest.FromString,
                    response_serializer=load__balancer__pb2.HeartbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'loadbalancer.LoadBalancerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoadBalancerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/Login',
            user__cart__pb2.LoginRequest.SerializeToString,
            user__cart__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/CreateAccount',
            user__cart__pb2.CreateAccountRequest.SerializeToString,
            user__cart__pb2.CreateAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddToCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/AddToCart',
            load__balancer__pb2.LoadBalancerCartRequest.SerializeToString,
            user__cart__pb2.CartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveFromCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/RemoveFromCart',
            load__balancer__pb2.LoadBalancerCartRequest.SerializeToString,
            user__cart__pb2.CartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/GetCart',
            user__cart__pb2.UserRequest.SerializeToString,
            user__cart__pb2.CartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Checkout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/Checkout',
            user__cart__pb2.UserRequest.SerializeToString,
            user__cart__pb2.CheckoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInventory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/GetInventory',
            inventory__pb2.Empty.SerializeToString,
            inventory__pb2.InventoryList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateInventory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/UpdateInventory',
            load__balancer__pb2.LoadBalancerInventoryRequest.SerializeToString,
            inventory__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplicateShardMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/ReplicateShardMapping',
            load__balancer__pb2.ShardMappingRequest.SerializeToString,
            load__balancer__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/loadbalancer.LoadBalancerService/Heartbeat',
            load__balancer__pb2.HeartbeatRequest.SerializeToString,
            load__balancer__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
