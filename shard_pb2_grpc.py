# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import shard_pb2 as shard__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in shard_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ShardServiceStub(object):
    """The Shard service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindUser = channel.unary_unary(
                '/shard.ShardService/FindUser',
                request_serializer=shard__pb2.FindUserRequest.SerializeToString,
                response_deserializer=shard__pb2.FindUserResponse.FromString,
                _registered_method=True)
        self.CreateUser = channel.unary_unary(
                '/shard.ShardService/CreateUser',
                request_serializer=shard__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=shard__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.VerifyLogin = channel.unary_unary(
                '/shard.ShardService/VerifyLogin',
                request_serializer=shard__pb2.VerifyLoginRequest.SerializeToString,
                response_deserializer=shard__pb2.VerifyLoginResponse.FromString,
                _registered_method=True)
        self.GetHighestUserId = channel.unary_unary(
                '/shard.ShardService/GetHighestUserId',
                request_serializer=shard__pb2.GetHighestUserIdRequest.SerializeToString,
                response_deserializer=shard__pb2.GetHighestUserIdResponse.FromString,
                _registered_method=True)
        self.UpdateLeader = channel.unary_unary(
                '/shard.ShardService/UpdateLeader',
                request_serializer=shard__pb2.UpdateLeaderRequest.SerializeToString,
                response_deserializer=shard__pb2.UpdateLeaderResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/shard.ShardService/Heartbeat',
                request_serializer=shard__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=shard__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.DirectInsert = channel.unary_unary(
                '/shard.ShardService/DirectInsert',
                request_serializer=shard__pb2.DirectInsertRequest.SerializeToString,
                response_deserializer=shard__pb2.DirectInsertResponse.FromString,
                _registered_method=True)


class ShardServiceServicer(object):
    """The Shard service definition
    """

    def FindUser(self, request, context):
        """Find a user by username
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Create a new user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyLogin(self, request, context):
        """Verify user credentials
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHighestUserId(self, request, context):
        """Get the highest user ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLeader(self, request, context):
        """Update leader status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Heartbeat to check server availability
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DirectInsert(self, request, context):
        """Direct insert (for replication between replicas)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShardServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindUser': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUser,
                    request_deserializer=shard__pb2.FindUserRequest.FromString,
                    response_serializer=shard__pb2.FindUserResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=shard__pb2.CreateUserRequest.FromString,
                    response_serializer=shard__pb2.CreateUserResponse.SerializeToString,
            ),
            'VerifyLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyLogin,
                    request_deserializer=shard__pb2.VerifyLoginRequest.FromString,
                    response_serializer=shard__pb2.VerifyLoginResponse.SerializeToString,
            ),
            'GetHighestUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHighestUserId,
                    request_deserializer=shard__pb2.GetHighestUserIdRequest.FromString,
                    response_serializer=shard__pb2.GetHighestUserIdResponse.SerializeToString,
            ),
            'UpdateLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLeader,
                    request_deserializer=shard__pb2.UpdateLeaderRequest.FromString,
                    response_serializer=shard__pb2.UpdateLeaderResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=shard__pb2.HeartbeatRequest.FromString,
                    response_serializer=shard__pb2.HeartbeatResponse.SerializeToString,
            ),
            'DirectInsert': grpc.unary_unary_rpc_method_handler(
                    servicer.DirectInsert,
                    request_deserializer=shard__pb2.DirectInsertRequest.FromString,
                    response_serializer=shard__pb2.DirectInsertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shard.ShardService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('shard.ShardService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ShardService(object):
    """The Shard service definition
    """

    @staticmethod
    def FindUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shard.ShardService/FindUser',
            shard__pb2.FindUserRequest.SerializeToString,
            shard__pb2.FindUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shard.ShardService/CreateUser',
            shard__pb2.CreateUserRequest.SerializeToString,
            shard__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shard.ShardService/VerifyLogin',
            shard__pb2.VerifyLoginRequest.SerializeToString,
            shard__pb2.VerifyLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHighestUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shard.ShardService/GetHighestUserId',
            shard__pb2.GetHighestUserIdRequest.SerializeToString,
            shard__pb2.GetHighestUserIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shard.ShardService/UpdateLeader',
            shard__pb2.UpdateLeaderRequest.SerializeToString,
            shard__pb2.UpdateLeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shard.ShardService/Heartbeat',
            shard__pb2.HeartbeatRequest.SerializeToString,
            shard__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DirectInsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shard.ShardService/DirectInsert',
            shard__pb2.DirectInsertRequest.SerializeToString,
            shard__pb2.DirectInsertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
