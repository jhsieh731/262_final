syntax = "proto3";

package raft;

service RaftService {
  // Leader election RPCs
  rpc RequestVote (VoteRequest) returns (VoteResponse) {}
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
  
  // Database operation RPCs
  rpc DBUpdate (DBUpdateRequest) returns (DBUpdateResponse) {}
  
  // Leader discovery
  rpc FindLeader (FindLeaderRequest) returns (FindLeaderResponse) {}
}

message VoteRequest {
  int32 term = 1;
  string candidate_id = 2;
  int32 last_log_index = 3;
  int32 last_log_term = 4;
}

message VoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
}

message AppendEntriesRequest {
  int32 term = 1;
  string leader_id = 2;
  int32 prev_log_index = 3;
  int32 prev_log_term = 4;
  repeated LogEntry entries = 5;
  int32 leader_commit = 6;
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
}

message LogEntry {
  int32 term = 1;
  string action = 2;
  bytes content = 3;
  int32 index = 4;
}

message DBUpdateRequest {
  string action = 1;
  bytes content = 2;
  int32 commit_index = 3;
}

message DBUpdateResponse {
  bool success = 1;
  int32 applied_index = 2;
  bytes applied_data = 3;
}

message FindLeaderRequest {
  string requester_id = 1;
}

message FindLeaderResponse {
  string leader_id = 1;
  string host = 2;
  int32 port = 3;
}
